// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Stadion {
  id               Int                @id() @default(autoincrement())
  phone            String
  region           String
  description      String
  status           Boolean?           @default(true)
  price            Int
  image            String
  menijer_chat_id  String
  latitude         Float
  longitude        Float
  Stadion_schedule Stadion_schedule[]
  Booking          Booking[]
  User             User[]
}

model Stadion_schedule {
  id         Int     @id @default(autoincrement())
  start_time String
  end_time   String
  stadion_id Int
  starion    Stadion @relation(fields: [stadion_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// model Booking {
//   id         Int    @id @default(autoincrement())
//   dey        String
//   time       String
//   stadion_id Int
//   user_id    Int
//   user       User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

//   stadion Stadion @relation(fields: [stadion_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
// }

model Booking {
  id        Int      @id @default(autoincrement())
  stadion   Stadion  @relation(fields: [stadionId], references: [id])
  stadionId Int
  dey       String
  time      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  book_date DateTime
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  phone      String
  chet_id    String
  telegramId BigInt?       @unique
  stadion    Stadion?  @relation(fields: [stadionId], references: [id])
  stadionId  Int?
  Booking    Booking[]
}
